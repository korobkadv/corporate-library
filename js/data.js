// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏
import { showNotification } from "./utils.js";

export let categories = [];
export let subcategories = [];
export let documents = [];
export let nextCategoryId = 7;
export let nextSubcategoryId = 1;
export let nextDocumentId = 1;

// –ü–æ—á–∞—Ç–∫–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
const initialCategories = [
  {
    id: 1,
    name: "–û—Ö–æ—Ä–æ–Ω–∞ –ø—Ä–∞—Ü—ñ",
    description: "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∑ —Ç–µ—Ö–Ω—ñ–∫–∏ –±–µ–∑–ø–µ–∫–∏ –Ω–∞ —Ä–æ–±–æ—á–∏—Ö –º—ñ—Å—Ü—è—Ö",
    icon: "üõ°Ô∏è",
  },
  {
    id: 2,
    name: "–ü–æ–∂–µ–∂–Ω–∞ –±–µ–∑–ø–µ–∫–∞",
    description: "–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∂–µ–∂–Ω–æ—ó –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –µ–≤–∞–∫—É–∞—Ü—ñ—ó",
    icon: "üî•",
  },
  {
    id: 3,
    name: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—è",
    description:
      "–î–æ–≤—ñ–¥–Ω–∏–∫–∏, —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ç–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–∏ –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å—å–∫–æ–≥–æ –æ–±–ª—ñ–∫—É",
    icon: "üìä",
  },
  {
    id: 4,
    name: "HR —Ç–∞ –∫–∞–¥—Ä–∏",
    description: "–î–æ–∫—É–º–µ–Ω—Ç–∏ –∑ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º, —Ç—Ä—É–¥–æ–≤—ñ –¥–æ–≥–æ–≤–æ—Ä–∏",
    icon: "üë•",
  },
  {
    id: 5,
    name: "–Æ—Ä–∏–¥–∏—á–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏",
    description: "–î–æ–≥–æ–≤–æ—Ä–∏, –ø–æ–ª–æ–∂–µ–Ω–Ω—è, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∏ —Ç–∞ –ø—Ä–∞–≤–æ–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏",
    icon: "‚öñÔ∏è",
  },
  {
    id: 6,
    name: "–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ",
    description: "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω—ñ –∫–∞—Ä—Ç–∏, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∏ –≤–∏—Ä–æ–±–Ω–∏—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤",
    icon: "‚öôÔ∏è",
  },
];

// –ü–æ—á–∞—Ç–∫–æ–≤—ñ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
const initialSubcategories = [
  {
    id: 1,
    name: "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –¢–ë",
    description: "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ —Ç–µ—Ö–Ω—ñ–∫–∏ –±–µ–∑–ø–µ–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –≤–∏–¥—ñ–≤ —Ä–æ–±—ñ—Ç",
    categoryId: 1,
    icon: "üìã",
  },
  {
    id: 2,
    name: "–ü–ª–∞–Ω–∏ –µ–≤–∞–∫—É–∞—Ü—ñ—ó",
    description: "–ü–ª–∞–Ω–∏ —Ç–∞ —Å—Ö–µ–º–∏ –µ–≤–∞–∫—É–∞—Ü—ñ—ó –ø—Ä–∏ –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è—Ö",
    categoryId: 2,
    icon: "üö™",
  },
  {
    id: 3,
    name: "–ü–æ–¥–∞—Ç–∫–æ–≤–∏–π –æ–±–ª—ñ–∫",
    description: "–î–æ–∫—É–º–µ–Ω—Ç–∏ –∑ –ø–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –æ–±–ª—ñ–∫—É —Ç–∞ –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ",
    categoryId: 3,
    icon: "üí∞",
  },
  {
    id: 4,
    name: "–¢—Ä—É–¥–æ–≤—ñ –¥–æ–≥–æ–≤–æ—Ä–∏",
    description: "–®–∞–±–ª–æ–Ω–∏ —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥–∏ —Ç—Ä—É–¥–æ–≤–∏—Ö –¥–æ–≥–æ–≤–æ—Ä—ñ–≤",
    categoryId: 4,
    icon: "üìÑ",
  },
  {
    id: 5,
    name: "–î–æ–≥–æ–≤–æ—Ä–∏ –∑ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏",
    description: "–¢–∏–ø–æ–≤—ñ –¥–æ–≥–æ–≤–æ—Ä–∏ —Ç–∞ —É–≥–æ–¥–∏ –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏",
    categoryId: 5,
    icon: "ü§ù",
  },
  {
    id: 6,
    name: "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω—ñ –∫–∞—Ä—Ç–∏",
    description: "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω—ñ –∫–∞—Ä—Ç–∏ –≤–∏—Ä–æ–±–Ω–∏—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤",
    categoryId: 6,
    icon: "üîß",
  },
];

// –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
const initialDocuments = [
  {
    id: 1,
    title: "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –æ—Ö–æ—Ä–æ–Ω–∏ –ø—Ä–∞—Ü—ñ –¥–ª—è –æ—Ñ—ñ—Å–Ω–∏—Ö –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤",
    description:
      "–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ —Ç–µ—Ö–Ω—ñ–∫–∏ –±–µ–∑–ø–µ–∫–∏ –¥–ª—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –æ—Ñ—ñ—Å—É, –≤–∫–ª—é—á–∞—é—á–∏ —Ä–æ–±–æ—Ç—É –∑ –∫–æ–º–ø'—é—Ç–µ—Ä–∞–º–∏ —Ç–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é —Ä–æ–±–æ—á–æ–≥–æ –º—ñ—Å—Ü—è",
    categoryId: 1,
    categoryName: "–û—Ö–æ—Ä–æ–Ω–∞ –ø—Ä–∞—Ü—ñ",
    categoryIcon: "üõ°Ô∏è",
    tags: ["—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è", "–æ—Ñ—ñ—Å", "–±–µ–∑–ø–µ–∫–∞", "–∫–æ–º–ø'—é—Ç–µ—Ä–∏"],
    dateAdded: new Date(2024, 0, 15),
    fileData: null,
    fileType: "document",
  },
  {
    id: 2,
    title: "–ü–ª–∞–Ω –µ–≤–∞–∫—É–∞—Ü—ñ—ó –ø—Ä–∏ –ø–æ–∂–µ–∂—ñ",
    description:
      "–î–µ—Ç–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω –¥—ñ–π —Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∏ –µ–≤–∞–∫—É–∞—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–ª—É –≤ —Ä–∞–∑—ñ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–∂–µ–∂—ñ –≤ –æ—Ñ—ñ—Å–Ω—ñ–π –±—É–¥—ñ–≤–ª—ñ",
    categoryId: 2,
    categoryName: "–ü–æ–∂–µ–∂–Ω–∞ –±–µ–∑–ø–µ–∫–∞",
    categoryIcon: "üî•",
    tags: ["–µ–≤–∞–∫—É–∞—Ü—ñ—è", "–ø–æ–∂–µ–∂–∞", "–ø–ª–∞–Ω", "–±–µ–∑–ø–µ–∫–∞"],
    dateAdded: new Date(2024, 1, 22),
    fileData: null,
    fileType: "document",
  },
  {
    id: 3,
    title: "–î–æ–≤—ñ–¥–Ω–∏–∫ –∑ –ø–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –æ–±–ª—ñ–∫—É",
    description:
      "–ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –¥–æ–≤—ñ–¥–Ω–∏–∫ –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ–≤ –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –∑–º—ñ–Ω–∞–º–∏ –≤ –ø–æ–¥–∞—Ç–∫–æ–≤–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤—ñ –£–∫—Ä–∞—ó–Ω–∏",
    categoryId: 3,
    categoryName: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—è",
    categoryIcon: "üìä",
    tags: ["–ø–æ–¥–∞—Ç–∫–∏", "–æ–±–ª—ñ–∫", "–∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ", "–¥–æ–≤—ñ–¥–Ω–∏–∫"],
    dateAdded: new Date(2024, 2, 10),
    fileData: null,
    fileType: "document",
  },
  {
    id: 4,
    title: "–ü–æ–ª–æ–∂–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–ø—É—Å—Ç–∫–∏",
    description:
      "–í–Ω—É—Ç—Ä—ñ—à–Ω—î –ø–æ–ª–æ–∂–µ–Ω–Ω—è –∫–æ–º–ø–∞–Ω—ñ—ó –ø—Ä–æ –ø–æ—Ä—è–¥–æ–∫ –Ω–∞–¥–∞–Ω–Ω—è —Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—É—Å—Ç–æ–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤",
    categoryId: 4,
    categoryName: "HR —Ç–∞ –∫–∞–¥—Ä–∏",
    categoryIcon: "üë•",
    tags: ["–≤—ñ–¥–ø—É—Å—Ç–∫–∏", "–∫–∞–¥—Ä–∏", "–ø–æ–ª–æ–∂–µ–Ω–Ω—è", "–æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è"],
    dateAdded: new Date(2024, 2, 28),
    fileData: null,
    fileType: "document",
  },
  {
    id: 5,
    title: "–¢–∏–ø–æ–≤–∏–π –¥–æ–≥–æ–≤—ñ—Ä –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è",
    description:
      "–®–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä—É –Ω–∞ –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ —É–º–æ–≤–∞–º–∏ —Ç–∞ –≤–∏–º–æ–≥–∞–º–∏",
    categoryId: 5,
    categoryName: "–Æ—Ä–∏–¥–∏—á–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏",
    categoryIcon: "‚öñÔ∏è",
    tags: ["–¥–æ–≥–æ–≤—ñ—Ä", "–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è", "—à–∞–±–ª–æ–Ω", "—é—Ä–∏–¥–∏—á–Ω–∏–π"],
    dateAdded: new Date(2024, 3, 5),
    fileData: null,
    fileType: "document",
  },
  {
    id: 6,
    title: "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∞ –∫–∞—Ä—Ç–∞ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞",
    description:
      "–ü–æ—à–∞–≥–æ–≤–∏–π –æ–ø–∏—Å —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –æ—Å–Ω–æ–≤–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó",
    categoryId: 6,
    categoryName: "–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ",
    categoryIcon: "‚öôÔ∏è",
    tags: ["—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è", "–≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ", "–ø—Ä–æ—Ü–µ—Å", "–∫–∞—Ä—Ç–∞"],
    dateAdded: new Date(2024, 3, 18),
    fileData: null,
    fileType: "document",
  },
];

export function loadData() {
  try {
    console.log("–ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...");

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    const savedCategories = localStorage.getItem("library_categories");
    if (savedCategories) {
      categories = JSON.parse(savedCategories);
      nextCategoryId = Math.max(...categories.map((c) => c.id)) + 1;
      console.log("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ localStorage:", categories.length);
    } else {
      categories = [...initialCategories];
      saveCategories();
      console.log("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ:", categories.length);
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    const savedSubcategories = localStorage.getItem("library_subcategories");
    if (savedSubcategories) {
      subcategories = JSON.parse(savedSubcategories);
      nextSubcategoryId = Math.max(...subcategories.map((s) => s.id)) + 1;
      console.log(
        "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ localStorage:",
        subcategories.length
      );
    } else {
      subcategories = [...initialSubcategories];
      saveSubcategories();
      console.log("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ:", subcategories.length);
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
    const savedDocuments = localStorage.getItem("library_documents");
    if (savedDocuments) {
      documents = JSON.parse(savedDocuments);
      // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ Date
      documents.forEach((doc) => {
        doc.dateAdded = new Date(doc.dateAdded);
      });
      nextDocumentId = Math.max(...documents.map((d) => d.id)) + 1;
      console.log("–î–æ–∫—É–º–µ–Ω—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ localStorage:", documents.length);
    } else {
      documents = [...initialDocuments];
      saveDocuments();
      console.log("–î–æ–∫—É–º–µ–Ω—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ:", documents.length);
    }

    console.log("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
    showNotification("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ", "success");
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", error);
    showNotification("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö", "error");

    // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    categories = [...initialCategories];
    subcategories = [...initialSubcategories];
    documents = [...initialDocuments];
  }
}

export function saveCategories() {
  try {
    localStorage.setItem("library_categories", JSON.stringify(categories));
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:", error);
    showNotification("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", "error");
  }
}

export function saveSubcategories() {
  try {
    localStorage.setItem(
      "library_subcategories",
      JSON.stringify(subcategories)
    );
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π:", error);
    showNotification("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π", "error");
  }
}

export function saveDocuments() {
  try {
    localStorage.setItem("library_documents", JSON.stringify(documents));
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:", error);
    showNotification("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤", "error");
  }
}

export function addCategory(category) {
  category.id = nextCategoryId++;
  categories.push(category);
  saveCategories();
  return category;
}

export function updateCategory(id, updatedCategory) {
  const index = categories.findIndex((c) => c.id === id);
  if (index !== -1) {
    categories[index] = { ...categories[index], ...updatedCategory };
    saveCategories();

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    documents.forEach((doc) => {
      if (doc.categoryId === id) {
        doc.categoryName = updatedCategory.name;
        doc.categoryIcon = updatedCategory.icon;
      }
    });
    saveDocuments();

    return categories[index];
  }
  return null;
}

export function deleteCategory(id) {
  const docsInCategory = documents.filter(
    (doc) => doc.categoryId === id
  ).length;
  if (docsInCategory > 0) {
    throw new Error(
      `–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –æ—Å–∫—ñ–ª—å–∫–∏ –≤ –Ω—ñ–π —î ${docsInCategory} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤`
    );
  }

  categories = categories.filter((cat) => cat.id !== id);
  saveCategories();
}

// CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π
export function addSubcategory(subcategory) {
  subcategory.id = nextSubcategoryId++;
  subcategories.push(subcategory);
  saveSubcategories();
  return subcategory;
}

export function updateSubcategory(id, updatedSubcategory) {
  const index = subcategories.findIndex((s) => s.id === id);
  if (index !== -1) {
    subcategories[index] = { ...subcategories[index], ...updatedSubcategory };
    saveSubcategories();
    return subcategories[index];
  }
  return null;
}

export function deleteSubcategory(id) {
  const docsInSubcategory = documents.filter(
    (doc) => doc.subcategoryId === id
  ).length;
  if (docsInSubcategory > 0) {
    throw new Error(
      `–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –æ—Å–∫—ñ–ª—å–∫–∏ –≤ –Ω—ñ–π —î ${docsInSubcategory} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤`
    );
  }

  subcategories = subcategories.filter((sub) => sub.id !== id);
  saveSubcategories();
}

export function getSubcategoriesByCategory(categoryId) {
  return subcategories.filter((sub) => sub.categoryId === categoryId);
}

export function addDocument(document) {
  document.id = nextDocumentId++;
  document.dateAdded = new Date();
  documents.push(document);
  saveDocuments();
  return document;
}

export function updateDocument(id, updatedDocument) {
  const index = documents.findIndex((d) => d.id === id);
  if (index !== -1) {
    documents[index] = { ...documents[index], ...updatedDocument };
    saveDocuments();
    return documents[index];
  }
  return null;
}

export function deleteDocument(id) {
  documents = documents.filter((doc) => doc.id !== id);
  saveDocuments();
}

export function getDocumentsByCategory(categoryId) {
  return documents.filter((doc) => doc.categoryId === categoryId);
}

export function searchDocuments(query, categoryId = null) {
  const searchTerm = query.toLowerCase();

  return documents.filter((doc) => {
    const matchesSearch =
      doc.title.toLowerCase().includes(searchTerm) ||
      doc.description.toLowerCase().includes(searchTerm) ||
      doc.categoryName.toLowerCase().includes(searchTerm) ||
      (doc.tags &&
        doc.tags.some((tag) => tag.toLowerCase().includes(searchTerm)));

    const matchesCategory = !categoryId || doc.categoryId === categoryId;

    return matchesSearch && matchesCategory;
  });
}

export function getStats() {
  const totalDocs = documents.length;
  const totalCats = categories.length;
  const totalSubcats = subcategories.length;

  // –î–æ–∫—É–º–µ–Ω—Ç–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è
  const currentMonth = new Date().getMonth();
  const currentYear = new Date().getFullYear();
  const docsThisMonth = documents.filter((doc) => {
    const docDate = new Date(doc.dateAdded);
    return (
      docDate.getMonth() === currentMonth &&
      docDate.getFullYear() === currentYear
    );
  }).length;

  return {
    totalDocuments: totalDocs,
    totalCategories: totalCats,
    totalSubcategories: totalSubcats,
    documentsThisMonth: docsThisMonth,
  };
}
